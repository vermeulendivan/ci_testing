name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - edited
      - opened
      - reopened
      - synchronize
    branches:
      - main

env:
  # Global environment variable
  IMAGE: qgis/qgis
  WITH_PYTHON_PEP: "true"
  MUTE_LOGS: "true"

jobs:
  linux-test:
    runs-on: ubuntu-20.04
    name: Running tests on Ubuntu for QGIS ${{ matrix.qgis_version_tag }}

    strategy:
      fail-fast: false
      matrix:
        qgis_version_tag:
          - release-3_16
          - release-3_20
          - release-3_22
          - release-3_24
          - final-3_26_0

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Preparing docker-compose environment
        env:
          QGIS_VERSION_TAG: ${{ matrix.qgis_version_tag }}
        run: |
          cat << EOF > .env
          QGIS_VERSION_TAG=${QGIS_VERSION_TAG}
          IMAGE=${IMAGE}
          ON_TRAVIS=true
          MUTE_LOGS=${MUTE_LOGS}
          WITH_PYTHON_PEP=${WITH_PYTHON_PEP}
          EOF
      - name: Install poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.2.2

      - name: Install plugin dependencies
        run: poetry install

      - name: Preparing test environment
        run: |
          cat .env
          docker pull "${IMAGE}":${{ matrix.qgis_version_tag }}
          poetry run python admin.py build --tests
          docker-compose up -d
          sleep 10

      - name: Run test suite
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "pip3 install flask"
          docker-compose exec -T qgis-testing-environment qgis_testrunner.sh test_suite.test_package

  windows-test:
    name: Running tests on Windows for QGIS ${{ matrix.qgis_version_tag }}
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        qgis_version_tag:
          - release-3_16
          - release-3_20
          - release-3_22
          - release-3_24
          - final-3_26_0

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Preparing docker-compose environment
        env:
          QGIS_VERSION_TAG: ${{ matrix.qgis_version_tag }}
        run: |
          echo QGIS_VERSION_TAG=release-3_16 IMAGE=qgis/qgis ON_TRAVIS=true MUTE_LOGS=true WITH_PYTHON_PEP=true > .env

      - name: Install poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.2.2

      - name: Install plugin dependencies
        run: poetry install

      - name: Preparing test environment
        run: |
          type .env
          docker pull qgis/qgis:release-3_16
          
  macos-test:
    name: Running tests on MacOS for QGIS ${{ matrix.qgis_version_tag }}
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        qgis_version_tag:
          - release-3_16
          - release-3_20
          - release-3_22
          - release-3_24
          - final-3_26_0

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install docker
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install docker 1.8.3
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
          open -a /Applications/Docker.app --args --unattended --accept-license
          echo "We are waiting for Docker to be up and running. It can take over 2 minutes..."
          while ! /Applications/Docker.app/Contents/Resources/bin/docker info &>/dev/null; do sleep 1; done

      - name: Preparing docker-compose environment
        env:
          QGIS_VERSION_TAG: ${{ matrix.qgis_version_tag }}
        run: |
          cat << EOF > .env
          QGIS_VERSION_TAG=${QGIS_VERSION_TAG}
          IMAGE=${IMAGE}
          ON_TRAVIS=true
          MUTE_LOGS=${MUTE_LOGS}
          WITH_PYTHON_PEP=${WITH_PYTHON_PEP}
          EOF

      - name: Preparing test environment
        run: |
          cat .env
          docker pull qgis/qgis:${{ matrix.qgis_version_tag }}